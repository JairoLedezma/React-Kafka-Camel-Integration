pipeline {
    agent any
    tools{
        oc 'oc'
    }
    stages {
        stage('Fetching Git Repository') {
            steps {
                git url: GIT_URL, branch: BRANCH
            }
        }
        stage ('Create & Replace Configurations') {
            steps {
                script {
                    openshift.withCluster( CLUSTER_NAME ) {
                        openshift.withProject( PROJECT_NAME ){
                            def processedTemplate = openshift.process( "-f", "./ReactApp/pipeline/ui-template.yml", "--param-file=./ReactApp/pipeline/ui.env", "-p", ("PROJECT_UID=" + PROJECT_NAME), "-p", ("PREFIX=" + BUILD_PREFIX))
                            try {
                                openshift.create( processedTemplate )
                                openshift.replace( processedTemplate )
                            } catch (err) {
                                echo err.getMessage()
                            }
                        }
                    }
                }
            }
        }
        stage ('UI-Build') {
            steps {
                script {
                    openshift.withCluster( CLUSTER_NAME ) {
                        openshift.withProject( PROJECT_NAME ){
                            def buildConfig = openshift.selector( 'buildconfig/' + BUILD_PREFIX + "-ui-build" )
                            buildConfig.startBuild("--follow=true --wait=true")
                        }
                    }
                }    
            }
        }
        stage ('UI-Runtime Building and Pushing Image to Quay') {
            steps {
                script {
                    openshift.withCluster( CLUSTER_NAME ) {
                        openshift.withProject( PROJECT_NAME ){
                            def buildConfig = openshift.selector( 'buildconfig/' + BUILD_PREFIX + "-ui-runtime" )
                            buildConfig.startBuild("--follow=true --wait=true")
                        }
                    }
                }    
            }
        }
    }
}